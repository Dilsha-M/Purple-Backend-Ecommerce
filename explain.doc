server.js--->

const express = require('express'); // Import the Express framework to create and manage routes.
const cookieParser = require('cookie-parser'); // Import to handle cookies.
const dotenv = require('dotenv'); // Import to load environment variables from .env file.
const path = require('path'); // Import to handle directory and file paths.
const connectDb = require('./db/db'); // Import database connection function from db.js.
const userRoutes = require('./routes/userRoutes'); // Import user-related routes.

dotenv.config(); // Load environment variables from .env file.

const app = express(); // Initialize the Express app.
const port = process.env.PORT || 3000; // Define the server's port using an environment variable or a default.

connectDb(); // Connect to the MongoDB database.

app.use(express.urlencoded({ extended: true })); // Middleware to parse URL-encoded data from forms.
app.use(express.json()); // Middleware to parse JSON data from incoming requests.
app.use(cookieParser()); // Middleware to handle cookies.

app.set('view engine', 'ejs'); // Set EJS as the template engine.
app.use(express.static(path.join(__dirname, 'public'))); // Serve static files (like CSS) from the "public" directory.

app.use('/user', userRoutes); // Use user routes under the "/user" path.

app.get('/', (req, res) => {
    res.send('API is running...'); // Simple message at the root URL to confirm the server is running.
});

app.listen(port, () => {
    console.log(`Server is running at http://localhost:${port}`); // Start the server and log the URL.
});



db/db.js---->

const mongoose = require('mongoose'); // Import Mongoose to manage MongoDB connections.

const connectDB = async () => { // Asynchronous function to connect to MongoDB.
  try {
    await mongoose.connect(process.env.CONNECTION_STRING, { // Connect using environment variable for security.
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    console.log("Database connection is ready..."); // Log if connection is successful.
  } catch (error) {
    console.error("Error connecting to the database:", error); // Log errors if connection fails.
  }
};

module.exports = connectDB; // Export the connectDB function for use in other files.





models/userModel.js----->

const mongoose = require('mongoose'); // Import Mongoose for defining the schema.

const userSchema = new mongoose.Schema({ // Define the structure of a User document.
  username: { type: String, required: true }, // Required string field for username.
  email: { type: String, required: true, unique: true }, // Required unique email field.
  password: { type: String, required: true } // Required string field for password (hashed).
});

module.exports = mongoose.model('User', userSchema); // Export the User model for database interaction.



controllers/userController.js=====>

const User = require('../models/userModel'); // Import the User model to interact with user data.
const bcrypt = require('bcryptjs'); // Import bcrypt for password hashing and validation.
const otpService = require('../services/otpService'); // Import OTP service to send OTP emails.

const registerUser = async (req, res) => { // Handles user registration.
  const { username, email, password } = req.body;
  try {
    const userExists = await User.findOne({ email }); // Check if the email is already in use.
    if (userExists) return res.status(400).json({ message: 'Email already registered' });

    const hashedPassword = await bcrypt.hash(password, 10); // Hash the password for security.
    const user = new User({ username, email, password: hashedPassword }); // Create new user with hashed password.
    await user.save(); // Save the user in the database.

    res.status(201).json({ message: 'User registered successfully' }); // Respond with success message.
  } catch (error) {
    res.status(500).json({ message: 'Error registering user', error }); // Handle any error.
  }
};

const loginUser = async (req, res) => { // Handles user login.
  const { email, password } = req.body;
  try {
    const user = await User.findOne({ email }); // Find user by email.
    if (!user) return res.status(400).json({ message: 'Invalid email or password' });

    const isMatch = await bcrypt.compare(password, user.password); // Check if password matches.
    if (!isMatch) return res.status(400).json({ message: 'Invalid email or password' });

    res.status(200).json({ message: 'Login successful', user: { username: user.username, email: user.email } }); // Respond with user data.
  } catch (error) {
    res.status(500).json({ message: 'Error logging in', error }); // Handle any error.
  }
};

const forgetPassword = async (req, res) => { // Handles forgotten password process.
  const { email } = req.body;
  try {
    const user = await User.findOne({ email }); // Check if user exists.
    if (!user) return res.status(404).send("User not found");

    const otp = await otpService.sendOTP(email); // Generate and send OTP.
    res.cookie('otp', otp).cookie('email', email).render('user/verifyotp'); // Store OTP and email in cookies and render verification page.
  } catch (error) {
    res.status(500).send("Error sending OTP: " + error.message); // Handle any error.
  }
};

const verifyOTP = async (req, res) => { // Verifies the OTP.
  const { user_otp } = req.body;
  const otp = req.cookies.otp;
  if (otp === user_otp) { // Check if OTP matches.
    res.render('user/resetpassword'); // Render password reset page if correct.
  } else {
    res.status(400).send({ message: "OTP is incorrect" }); // Respond with error if incorrect.
  }
};

const resetPassword = async (req, res) => { // Resets the user's password.
  const { email, newPassword, confirmPassword } = req.body;
  if (newPassword !== confirmPassword) return res.status(400).send("Passwords do not match");

  try {
    const user = await User.findOne({ email }); // Find user by email.
    if (!user) return res.status(404).json({ message: "User not found" });

    const hashedPassword = await bcrypt.hash(newPassword, 10); // Hash the new password.
    await User.updateOne({ email }, { password: hashedPassword }); // Update the password in the database.
    res.status(200).json({ message: "Password reset successfully" }); // Respond with success.
  } catch (error) {
    res.status(500).json({ message: "An error occurred while resetting the password" }); // Handle any error.
  }
};

module.exports = { registerUser, loginUser, forgetPassword, verifyOTP, resetPassword }; // Export controller functions.



otpService.js====>

const nodemailer = require('nodemailer'); // Import nodemailer for sending emails.

function getRandomNumber() { // Generates a random 4-digit OTP.
  return Math.floor(Math.random() * 9000) + 1000;
}

const sendOTP = async (email) => { // Sends the OTP to the specified email.
  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.GMAIL_ID,
      pass: process.env.GMAIL_PASS
    }
  });

  const otp = getRandomNumber(); // Generate OTP.
  const mailOptions = {
    from: process.env.GMAIL_ID,
    to: email,
    subject: `Your OTP ${otp}`,
    text: `Your OTP for password reset is: ${otp}`
  };

  await transporter.sendMail(mailOptions); // Send the OTP email.
  return otp; // Return the OTP to verify it later.
};

module.exports = { sendOTP }; // Export the OTP function.


routes/userRoutes.js

const express = require('express');
const router = express.Router();
const userController = require('../controllers/userController'); // Import user controller.

router.route('/register') // Route for registration.
    .get((req, res) => res.render('user/register'))
    .post(userController.registerUser);

router.route('/login') // Route for login.
    .get((req, res) => res.render('user/login'))
    .post(userController.loginUser);

router.route('/forgetpassword') // Route for forgotten password.
    .get((req, res) => res.render('user/forget-password'))
    .post(userController.forgetPassword);

router.route('/verifyotp') // Route for OTP verification.
    .get((req, res) => res.render('user/verifyotp'))
    .post(userController.verifyOTP);

router.route('/resetpassword') // Route for password reset.
    .get((req, res) => res.render('user/resetpassword'))
    .post(userController.resetPassword);

module.exports = router; // Export the router.































Root Files

server.js: The main entry point of the application that initializes the server, sets up middlewares, connects to the database, and registers routes.
Core Directories

controllers: Contains all the logic for handling user requests.

userController.js: Manages user registration, login, password reset, OTP verification, and other user-related operations.
models: Defines the structure of database collections.

userModel.js: Defines the structure of the user data in MongoDB using a Mongoose schema.
routes: Defines the routes and links them to specific controller functions.

userRoutes.js: Sets up routes for user actions, such as login, register, OTP verification, etc.
services: Contains reusable functionalities, such as sending emails, generating OTPs, and other auxiliary tasks.

otpService.js: Generates a random OTP and emails it to the user.
middleware: Middleware files if there are any additional processing layers required (not directly used in this setup, but can be useful if more specific middleware is added).

views: Stores the EJS templates used to render HTML views for the front end.

Contains files like login.ejs, register.ejs, forget-password.ejs, verifyotp.ejs, and resetpassword.ejs.
db: Contains files for database connection setup.

db.js: Establishes a connection to MongoDB using environment variables.
